/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/valid-url/index.js
var require_valid_url = __commonJS({
  "node_modules/valid-url/index.js"(exports, module2) {
    (function(module3) {
      "use strict";
      module3.exports.is_uri = is_iri;
      module3.exports.is_http_uri = is_http_iri;
      module3.exports.is_https_uri = is_https_iri;
      module3.exports.is_web_uri = is_web_iri;
      module3.exports.isUri = is_iri;
      module3.exports.isHttpUri = is_http_iri;
      module3.exports.isHttpsUri = is_https_iri;
      module3.exports.isWebUri = is_web_iri;
      var splitUri = function(uri) {
        var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
        return splitted;
      };
      function is_iri(value) {
        if (!value) {
          return;
        }
        if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value))
          return;
        if (/%[^0-9a-f]/i.test(value))
          return;
        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value))
          return;
        var splitted = [];
        var scheme = "";
        var authority = "";
        var path = "";
        var query = "";
        var fragment = "";
        var out = "";
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        if (!(scheme && scheme.length && path.length >= 0))
          return;
        if (authority && authority.length) {
          if (!(path.length === 0 || /^\//.test(path)))
            return;
        } else {
          if (/^\/\//.test(path))
            return;
        }
        if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase()))
          return;
        out += scheme + ":";
        if (authority && authority.length) {
          out += "//" + authority;
        }
        out += path;
        if (query && query.length) {
          out += "?" + query;
        }
        if (fragment && fragment.length) {
          out += "#" + fragment;
        }
        return out;
      }
      function is_http_iri(value, allowHttps) {
        if (!is_iri(value)) {
          return;
        }
        var splitted = [];
        var scheme = "";
        var authority = "";
        var path = "";
        var port = "";
        var query = "";
        var fragment = "";
        var out = "";
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        if (!scheme)
          return;
        if (allowHttps) {
          if (scheme.toLowerCase() != "https")
            return;
        } else {
          if (scheme.toLowerCase() != "http")
            return;
        }
        if (!authority) {
          return;
        }
        if (/:(\d+)$/.test(authority)) {
          port = authority.match(/:(\d+)$/)[0];
          authority = authority.replace(/:\d+$/, "");
        }
        out += scheme + ":";
        out += "//" + authority;
        if (port) {
          out += port;
        }
        out += path;
        if (query && query.length) {
          out += "?" + query;
        }
        if (fragment && fragment.length) {
          out += "#" + fragment;
        }
        return out;
      }
      function is_https_iri(value) {
        return is_http_iri(value, true);
      }
      function is_web_iri(value) {
        return is_http_iri(value) || is_https_iri(value);
      }
    })(module2);
  }
});

// node_modules/@opd-libs/opd-metadata-lib/lib/Utils.js
var require_Utils = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/Utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OPDTraversalError = exports.validatePath = exports.parsePath = exports.traverseObjectByPath = exports.traverseObjectToParent = exports.traverseObject = void 0;
    function traverseObject(path, o) {
      let pathParts = parsePath(path);
      return traverseObjectByPath(pathParts, o);
    }
    exports.traverseObject = traverseObject;
    function traverseObjectToParent(path, o) {
      var _a;
      let pathParts = parsePath(path);
      if (pathParts[0] === "") {
        throw new OPDTraversalError("can not traverse to parent on self reference");
      }
      let parentPath = pathParts.slice(0, -1);
      let childKey = (_a = pathParts.at(-1)) !== null && _a !== void 0 ? _a : "";
      let parentObject = traverseObjectByPath(parentPath, o);
      return {
        parent: { key: parentPath, value: parentObject },
        child: { key: childKey, value: parentObject[childKey] }
      };
    }
    exports.traverseObjectToParent = traverseObjectToParent;
    function traverseObjectByPath(pathParts, o) {
      for (const pathPart of pathParts) {
        if (pathPart === "") {
          return o;
        }
        if (o === void 0) {
          return void 0;
        }
        o = o[pathPart];
      }
      return o;
    }
    exports.traverseObjectByPath = traverseObjectByPath;
    function parsePath(path) {
      path = path.replace(/'/g, '"');
      validatePath(path);
      return path.split(".").map((x) => x.split("[").map((y) => {
        if (y.endsWith("]")) {
          y = y.slice(0, -1);
        }
        if (y.startsWith('"') && y.endsWith('"')) {
          y = y.slice(1, -1);
        }
        return y;
      })).flat();
    }
    exports.parsePath = parsePath;
    function validatePath(path) {
      const numbers = "0123456789";
      const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      let insideStringBrackets = false;
      let insideNumberBrackets = false;
      for (let i = 0; i < path.length; i++) {
        const char = path[i];
        const nextChar = path[i + 1];
        if (char === ".") {
          if (i === 0) {
            throw new OPDTraversalError(`Invalid character '${char}' at position ${i} in "${path}", path may not start with '.'`);
          }
          if (!(letters.includes(nextChar) || nextChar === "_" || nextChar === "$")) {
            throw new OPDTraversalError(`Invalid character '${nextChar}' at position ${i + 1} in "${path}", expected a letter, '_' or '$' to follow '.'`);
          }
        }
        if (char === "[") {
          if (numbers.includes(nextChar)) {
            insideNumberBrackets = true;
            continue;
          } else if (nextChar === '"') {
            if (path[i + 2] === '"') {
              throw new OPDTraversalError(`Invalid character '${path[i + 2]}' at position ${i + 2} in "${path}", the string between the quotation-marks may not be empty`);
            }
            insideStringBrackets = true;
            i += 1;
            continue;
          } else {
            throw new OPDTraversalError(`Invalid character '${nextChar}' at position ${i + 1} in "${path}", expected number or '"' to follow a '['`);
          }
        }
        if (insideStringBrackets && char === '"') {
          if (nextChar === "]") {
            insideStringBrackets = false;
            i += 1;
            continue;
          } else {
            throw new OPDTraversalError(`Invalid character '${nextChar}' at position ${i + 1} in "${path}", expected ']' to follow a '"'`);
          }
        }
        if (insideNumberBrackets && char === "]") {
          insideNumberBrackets = false;
          continue;
        }
        if (insideStringBrackets && (char === "." || char === "]" || char === "[")) {
          throw new OPDTraversalError(`Invalid character '${char}' at position ${i} in "${path}"`);
        }
        if (insideNumberBrackets && !numbers.includes(char)) {
          throw new OPDTraversalError(`Invalid character '${char}' at position ${i} in "${path}", number expected inside of brackets`);
        }
        if (!insideNumberBrackets && !insideStringBrackets) {
          if (char === "]") {
            throw new OPDTraversalError(`Invalid character '${char}' at position ${i} in "${path}", expected '[' to proceed`);
          }
        }
      }
    }
    exports.validatePath = validatePath;
    var OPDTraversalError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    exports.OPDTraversalError = OPDTraversalError;
  }
});

// node_modules/@opd-libs/opd-metadata-lib/lib/ObsUtils.js
var require_ObsUtils = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/ObsUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringifyFrontmatter = void 0;
    var obsidian_1 = require("obsidian");
    function stringifyFrontmatter(frontmatter) {
      return `---
${(0, obsidian_1.stringifyYaml)(frontmatter)}---`;
    }
    exports.stringifyFrontmatter = stringifyFrontmatter;
  }
});

// node_modules/@opd-libs/opd-metadata-lib/lib/Internal.js
var require_Internal = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/Internal.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Internal = void 0;
    var obsidian_1 = require("obsidian");
    var Utils_1 = require_Utils();
    var ObsUtils_1 = require_ObsUtils();
    var Internal;
    (function(Internal2) {
      Internal2.frontMatterRexExpPattern = "^(---)\\n[\\s\\S]*?\\n---";
      function getMetaDataFromFileContent(fileContent) {
        const regExp = new RegExp(Internal2.frontMatterRexExpPattern);
        const frontMatterRegExpResult = regExp.exec(fileContent);
        if (!frontMatterRegExpResult) {
          return [];
        }
        let frontMatter = frontMatterRegExpResult[0];
        if (!frontMatter) {
          return [];
        }
        frontMatter = frontMatter.substring(4);
        frontMatter = frontMatter.substring(0, frontMatter.length - 3);
        return getMetaDataFromYAML(frontMatter);
      }
      Internal2.getMetaDataFromFileContent = getMetaDataFromFileContent;
      function getMetaDataFromYAML(yaml) {
        if (!yaml) {
          return {};
        }
        const obj = (0, obsidian_1.parseYaml)(yaml);
        if (!obj) {
          return {};
        }
        return obj;
      }
      Internal2.getMetaDataFromYAML = getMetaDataFromYAML;
      function getMetadataFromFileCache(file, plugin) {
        var _a;
        let metadata = (_a = plugin.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
        if (metadata) {
          metadata = Object.assign({}, metadata);
          delete metadata.position;
        } else {
          return {};
        }
        return metadata;
      }
      Internal2.getMetadataFromFileCache = getMetadataFromFileCache;
      function removeFrontmatter(fileContent) {
        return fileContent.replace(new RegExp(Internal2.frontMatterRexExpPattern), "");
      }
      Internal2.removeFrontmatter = removeFrontmatter;
      function updateFrontmatter(metadata, file, plugin) {
        return __awaiter(this, void 0, void 0, function* () {
          let fileContent = yield plugin.app.vault.cachedRead(file);
          fileContent = removeFrontmatter(fileContent);
          fileContent = `${(0, ObsUtils_1.stringifyFrontmatter)(metadata)}${fileContent}`;
          yield plugin.app.vault.modify(file, fileContent);
        });
      }
      Internal2.updateFrontmatter = updateFrontmatter;
      function hasField(path, metadata) {
        return getField(path, metadata) !== void 0;
      }
      Internal2.hasField = hasField;
      function getField(path, metadata) {
        return (0, Utils_1.traverseObject)(path, metadata);
      }
      Internal2.getField = getField;
      function deleteField(path, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, can not delete child from non existing parent`);
        }
        if (Array.isArray(parent.value)) {
          const index = Number.parseInt(child.key);
          if (Number.isNaN(index)) {
            return metadata;
          }
          parent.value.splice(index, 1);
        } else {
          delete parent.value[child.key];
        }
        return metadata;
      }
      Internal2.deleteField = deleteField;
      function updateField(path, value, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, please create the parent first`);
        }
        if (child.value === void 0) {
          throw Error(`Field with key "${path}" does not exist in Object`);
        }
        parent.value[child.key] = value;
        return metadata;
      }
      Internal2.updateField = updateField;
      function insertField(path, value, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, please create the parent first`);
        }
        if (child.value !== void 0) {
          throw Error(`Field with key "${path}" does already exist in Object`);
        }
        parent.value[child.key] = value;
        return metadata;
      }
      Internal2.insertField = insertField;
      function updateOrInsertField(path, value, metadata) {
        let { parent, child } = (0, Utils_1.traverseObjectToParent)(path, metadata);
        if (parent.value === void 0) {
          throw Error(`The parent of "${path}" does not exist in Object, please create the parent first`);
        }
        parent.value[child.key] = value;
        return metadata;
      }
      Internal2.updateOrInsertField = updateOrInsertField;
    })(Internal = exports.Internal || (exports.Internal = {}));
  }
});

// node_modules/@opd-libs/opd-metadata-lib/lib/API.js
var require_API = __commonJS({
  "node_modules/@opd-libs/opd-metadata-lib/lib/API.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setFrontmatterOfTFile = exports.getFrontmatterOfTFile = exports.deleteFieldInTFile = exports.updateOrInsertFieldInTFile = exports.updateFieldInTFile = exports.insertFieldInTFile = exports.getFieldFromTFile = exports.doesFieldExistInTFile = void 0;
    var Internal_1 = require_Internal();
    function doesFieldExistInTFile(field, file, plugin, isInline = false) {
      const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
      return Internal_1.Internal.hasField(field, metadata);
    }
    exports.doesFieldExistInTFile = doesFieldExistInTFile;
    function getFieldFromTFile(field, file, plugin, isInline = false) {
      const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
      return Internal_1.Internal.getField(field, metadata);
    }
    exports.getFieldFromTFile = getFieldFromTFile;
    function insertFieldInTFile(field, value, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.insertField(field, value, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.insertFieldInTFile = insertFieldInTFile;
    function updateFieldInTFile(field, value, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.updateField(field, value, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.updateFieldInTFile = updateFieldInTFile;
    function updateOrInsertFieldInTFile(field, value, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        let metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.updateOrInsertField(field, value, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.updateOrInsertFieldInTFile = updateOrInsertFieldInTFile;
    function deleteFieldInTFile(field, file, plugin, isInline = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const metadata = Internal_1.Internal.getMetadataFromFileCache(file, plugin);
        Internal_1.Internal.deleteField(field, metadata);
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.deleteFieldInTFile = deleteFieldInTFile;
    function getFrontmatterOfTFile2(file, plugin) {
      return Internal_1.Internal.getMetadataFromFileCache(file, plugin);
    }
    exports.getFrontmatterOfTFile = getFrontmatterOfTFile2;
    function setFrontmatterOfTFile2(metadata, file, plugin) {
      return __awaiter(this, void 0, void 0, function* () {
        yield Internal_1.Internal.updateFrontmatter(metadata, file, plugin);
      });
    }
    exports.setFrontmatterOfTFile = setFrontmatterOfTFile2;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FrontmatterLinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/editor_plugin.ts
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view2 = require("@codemirror/view");

// src/link_widget.ts
var import_view = require("@codemirror/view");
var import_obsidian = require("obsidian");
var import_valid_url = __toESM(require_valid_url());
var FrontmatterLinkWidget = class extends import_view.WidgetType {
  constructor(linkSlice) {
    super();
    this.linkSlice = linkSlice;
  }
  toDOM(view) {
    const aElement = document.createElement("a");
    aElement.href = this.linkSlice.href;
    aElement.innerText = this.linkSlice.alias || this.linkSlice.href;
    if ((0, import_valid_url.isUri)(this.linkSlice.href)) {
      aElement.addClass(this.linkSlice.markdownLink ? "external-link" : "cm-url");
    } else {
      aElement.addClass("internal-link");
      if (!(app.metadataCache.getFirstLinkpathDest(this.linkSlice.href, "") instanceof import_obsidian.TFile) && !this.linkSlice.markdownLink) {
        aElement.addClass("is-unresolved");
      }
    }
    return aElement;
  }
};

// src/editor_plugin.ts
var import_valid_url2 = __toESM(require_valid_url());
var import_obsidian2 = require("obsidian");
var FrontmatterLinksEditorPlugin = class {
  constructor(view) {
    this.linkSlices = new Array();
    this.linkSlices = new Array();
    this.decorations = this.buildDecorations(view);
  }
  update(update) {
    if (update.docChanged || update.viewportChanged || update.selectionSet) {
      this.decorations = this.buildDecorations(update.view);
    }
  }
  destroy() {
  }
  buildDecorations(view) {
    const builder = new import_state.RangeSetBuilder();
    this.linkSlices = new Array();
    this.findLinks(view, this.linkSlices);
    this.processLinks(view, builder);
    return builder.finish();
  }
  findLinks(view, linkSlices) {
    const settings = app.plugins.plugins["frontmatter-links"].settings;
    let externalLinkFrom;
    let externalLinkTo;
    for (let { from, to } of view.visibleRanges) {
      (0, import_language.syntaxTree)(view.state).iterate({
        from,
        to,
        enter(node) {
          if (externalLinkFrom === null) {
            if (node.name === "hmd-frontmatter") {
              externalLinkFrom = node.from;
              externalLinkTo = node.to;
            }
          } else {
            if (node.name === "atom_hmd-frontmatter" || node.name === "def_hmd-frontmatter") {
              let text = view.state.sliceDoc(externalLinkFrom, externalLinkTo);
              if ((0, import_valid_url2.isUri)(text)) {
                linkSlices.push({
                  originalText: text,
                  href: text,
                  from: externalLinkFrom,
                  to: externalLinkTo
                });
              }
              externalLinkFrom = null;
            } else {
              externalLinkTo = node.to;
            }
          }
          if (node.name === "hmd-frontmatter_string") {
            const text = view.state.sliceDoc(node.from + 1, node.to - 1);
            let match;
            let href;
            let alias;
            let markdownLink;
            if (match = text.match(/\[\[(.+)\|(.+)\]\]/m)) {
              href = match[1];
              alias = match[2];
            } else if (match = text.match(/\[\[(.+)\]\]/m)) {
              href = match[1];
            } else if (match = text.match(/\[(.+)\]\((.+)\)/m)) {
              href = match[2];
              alias = match[1];
              markdownLink = true;
            } else if ((0, import_valid_url2.isUri)(text)) {
              href = text;
            }
            if (href) {
              linkSlices.push({
                originalText: text,
                href,
                alias,
                from: node.from + (settings.hideQuotes ? 0 : 1),
                to: node.to - (settings.hideQuotes ? 0 : 1),
                markdownLink
              });
            }
          }
        }
      });
    }
  }
  processLinks(view, builder) {
    for (let linkSlice of this.linkSlices) {
      const cursorHead = view.state.selection.main.head;
      if (linkSlice.from - 1 <= cursorHead && cursorHead <= linkSlice.to + 1) {
        this.styleLink(view, builder, linkSlice);
      } else {
        builder.add(linkSlice.from, linkSlice.to, import_view2.Decoration.replace({ widget: new FrontmatterLinkWidget(linkSlice) }));
      }
    }
  }
  styleLink(view, builder, linkSlice) {
    const settings = app.plugins.plugins["frontmatter-links"].settings;
    const unresolved = !(app.metadataCache.getFirstLinkpathDest(linkSlice.href, "") instanceof import_obsidian2.TFile);
    const text = view.state.sliceDoc(linkSlice.from, linkSlice.to);
    let match;
    if (match = text.match(/\[\[(.+)\|(.+)\]\]/m)) {
      builder.add(linkSlice.from + (settings.hideQuotes ? 1 : 0), linkSlice.from + 2 + (settings.hideQuotes ? 1 : 0), import_view2.Decoration.mark({ class: "cm-formatting-link cm-formatting-link-start" }));
      builder.add(linkSlice.from + text.indexOf(match[1]), linkSlice.from + text.indexOf(match[1]) + match[1].length, import_view2.Decoration.mark({ class: "cm-link" + (unresolved ? " is-unresolved" : "") }));
      builder.add(linkSlice.from + text.indexOf(match[1]) + match[1].length, linkSlice.from + text.indexOf(match[1]) + match[1].length + 1, import_view2.Decoration.mark({ class: "cm-hmd-internal-link" }));
      builder.add(linkSlice.from + text.indexOf(match[2]), linkSlice.from + text.indexOf(match[2]) + match[2].length, import_view2.Decoration.mark({ class: "cm-link" + (unresolved ? " is-unresolved" : "") }));
      builder.add(linkSlice.to - 2 - (settings.hideQuotes ? 1 : 0), linkSlice.to - (settings.hideQuotes ? 1 : 0), import_view2.Decoration.mark({ class: "cm-formatting-link cm-formatting-link-end" }));
    } else if (match = text.match(/\[\[(.+)\]\]/m)) {
      builder.add(linkSlice.from + (settings.hideQuotes ? 1 : 0), linkSlice.from + 2 + (settings.hideQuotes ? 1 : 0), import_view2.Decoration.mark({ class: "cm-formatting-link cm-formatting-link-start" }));
      builder.add(linkSlice.from + text.indexOf(match[1]), linkSlice.from + text.indexOf(match[1]) + match[1].length, import_view2.Decoration.mark({ class: "cm-link" + (unresolved ? " is-unresolved" : "") }));
      builder.add(linkSlice.to - 2 - (settings.hideQuotes ? 1 : 0), linkSlice.to - (settings.hideQuotes ? 1 : 0), import_view2.Decoration.mark({ class: "cm-formatting-link cm-formatting-link-end" }));
    } else if (match = text.match(/\[(.+)\](\(.+\))/m)) {
      builder.add(linkSlice.from + (settings.hideQuotes ? 1 : 0), linkSlice.from + 1 + (settings.hideQuotes ? 1 : 0), import_view2.Decoration.mark({ class: "cm-formatting-link cm-formatting-link-start" }));
      builder.add(linkSlice.from + text.indexOf(match[1]), linkSlice.from + text.indexOf(match[1]) + match[1].length, import_view2.Decoration.mark({ class: "cm-link" }));
      builder.add(linkSlice.from + text.indexOf("]"), linkSlice.from + text.indexOf("]") + 1, import_view2.Decoration.mark({ class: "cm-formatting-link cm-formatting-link-end" }));
      builder.add(linkSlice.from + text.indexOf(match[2]), linkSlice.from + text.indexOf(match[2]) + match[2].length, import_view2.Decoration.mark({ class: (0, import_valid_url2.isUri)(linkSlice.href) ? "external-link" : "cm-url" }));
    } else if (match = text.match(/\"(.+)\"/m)) {
      builder.add(linkSlice.from + text.indexOf(match[1]), linkSlice.from + text.indexOf(match[1]) + match[1].length, import_view2.Decoration.mark({ class: "cm-url" }));
    } else if ((0, import_valid_url2.isUri)(text)) {
      builder.add(linkSlice.from, linkSlice.to, import_view2.Decoration.mark({ class: "cm-url" }));
    }
  }
};
var FRONTMATTER_LINKS_EDITOR_PLUGIN = import_view2.ViewPlugin.fromClass(FrontmatterLinksEditorPlugin, {
  decorations: (value) => value.decorations
});

// src/metadata_cache.ts
var import_obsidian3 = require("obsidian");
var import_valid_url3 = __toESM(require_valid_url());
function onMetadataCacheResolve(file) {
  const cache = app.metadataCache.getFileCache(file);
  if (!cache) {
    return;
  }
  const frontmatter = cache.frontmatter;
  if (!frontmatter) {
    return;
  }
  addFrontmatterLinksToCache(file, frontmatter);
}
function addFrontmatterLinksToCache(file, frontmatter) {
  if (!frontmatter) {
    return;
  }
  for (let key of Object.keys(frontmatter)) {
    const value = frontmatter[key];
    if (typeof value === "string") {
      const match = value.match(/\[\[(.+)\|.+\]\]/m) || value.match(/\[\[(.+)\]\]/m) || value.match(/\[.+\]\((.+)\)/m);
      if (!match) {
        continue;
      }
      let href = match[1];
      if ((0, import_valid_url3.isUri)(href)) {
        continue;
      }
      let f = app.metadataCache.getFirstLinkpathDest(href, "");
      let links;
      if (f instanceof import_obsidian3.TFile) {
        href = f.path;
        links = app.metadataCache.resolvedLinks;
      } else {
        links = app.metadataCache.unresolvedLinks;
      }
      if (links[file.path][href]) {
        links[file.path][href] += 1;
      } else {
        links[file.path][href] = 1;
      }
    } else if (typeof value === "object") {
      addFrontmatterLinksToCache(file, value);
    }
  }
}

// src/rename_links.ts
var import_API = __toESM(require_API());
var import_obsidian4 = require("obsidian");
function onVaultFileRename(file, oldPath, plugin) {
  for (let fileName of Object.keys(app.metadataCache.resolvedLinks)) {
    const links = app.metadataCache.resolvedLinks[fileName];
    let oldName = oldPath;
    let match = oldPath.match(/.+\/(.+\.md)/m);
    if (match) {
      oldName = match[1];
    }
    if (links[oldPath]) {
      const f = app.metadataCache.getFirstLinkpathDest(fileName, "");
      if (f instanceof import_obsidian4.TFile) {
        const frontmatter = (0, import_API.getFrontmatterOfTFile)(f, plugin);
        renameFrontmatterLinks(frontmatter, oldName.substring(0, oldName.length - 3), file.name.substring(0, file.name.length - 3));
        (0, import_API.setFrontmatterOfTFile)(frontmatter, f, plugin);
        app.metadataCache.initialize();
      }
    }
  }
}
function renameFrontmatterLinks(frontmatter, oldName, newName) {
  for (let key of Object.keys(frontmatter)) {
    const value = frontmatter[key];
    if (typeof value === "string") {
      let match;
      if (match = value.match(/\[\[(.+)\|(.+)\]\]/m)) {
        if (match[1] === oldName) {
          frontmatter[key] = "[[" + newName + "|" + match[2] + "]]";
        }
      } else if (match = value.match(/\[\[(.+)\]\]/m)) {
        if (match[1] === oldName) {
          frontmatter[key] = "[[" + newName + "]]";
        }
      } else if (match = value.match(/\[(.+)\]\((.+)\)/m)) {
        if (match[2] === oldName) {
          frontmatter[key] = "[" + match[1] + "](" + newName + ")";
        }
      }
    } else if (typeof value === "object") {
      renameFrontmatterLinks(value, oldName, newName);
    }
  }
}

// src/settings.ts
var import_obsidian5 = require("obsidian");
var DEFAULT_SETTINGS = {
  hideQuotes: false,
  addToGraph: true,
  updateLinks: true
};
var FrontmatterLinksSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    new import_obsidian5.Setting(this.containerEl).setName("Hide quotation marks").setDesc("Don't render quotation marks surrounding frontmatter links.").addToggle((component) => {
      component.setValue(this.plugin.settings.hideQuotes);
      component.onChange((value) => {
        this.plugin.settings.hideQuotes = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(this.containerEl).setName("Add to graph").setDesc("Add frontmatter link connections to the graph view.").addToggle((component) => {
      component.setValue(this.plugin.settings.addToGraph);
      component.onChange((value) => {
        app.metadataCache.initialize();
        this.plugin.settings.addToGraph = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(this.containerEl).setName("Automatically update internal frontmatter links").setDesc("Turn on to update frontmatter links when a note is renamed.<br>'Automatically update internal links' in 'Files & Links' must also be enabled.").setDesc(createFragment((el) => {
      el.appendText("Turn on to update frontmatter links when a note is renamed.");
      el.createEl("br");
      el.createEl("div", {
        cls: "mod-warning",
        text: "'Automatically update internal links' in 'Files & Links' must also be enabled."
      });
    })).addToggle((component) => {
      component.setValue(this.plugin.settings.updateLinks);
      component.onChange((value) => {
        this.plugin.settings.updateLinks = value;
        this.plugin.saveSettings();
      });
    });
  }
  hide() {
    this.containerEl.empty();
  }
};

// src/main.ts
var FrontmatterLinksPlugin = class extends import_obsidian6.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new FrontmatterLinksSettingTab(this.app, this));
    this.registerEditorExtension(FRONTMATTER_LINKS_EDITOR_PLUGIN);
    if (this.settings.addToGraph) {
      app.metadataCache.initialize();
    }
    const plugin = this;
    this.registerEvent(app.metadataCache.on("resolve", (file) => {
      if (!plugin.settings.addToGraph) {
        return;
      }
      onMetadataCacheResolve(file);
    }));
    this.registerEvent(app.vault.on("rename", (file, oldPath) => {
      if (plugin.settings.updateLinks && app.vault.getConfig("alwaysUpdateLinks")) {
        onVaultFileRename(file, oldPath, plugin);
      }
    }));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.saveSettings();
  }
  async saveSettings() {
    this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
